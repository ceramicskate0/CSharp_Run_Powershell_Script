using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;
using System.Security;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Management.Automation.Runspaces;
using System.Globalization;
using PowerShell = System.Management.Automation.PowerShell;
using System.Collections.ObjectModel;

namespace PowershellinC#
{

    internal class Powershell_InCsharp
    {
        private StringBuilder output = new StringBuilder();
        private bool shouldExit;

        private int exitCode;

        public bool ShouldExit
        {
            get { return this.shouldExit; }
            set { this.shouldExit = value; }
        }

        public int ExitCode
        {
            get { return this.exitCode; }
            set { this.exitCode = value; }
        }

        public static void Run_PS_Script(string ScriptBlock)
        {
            Powershell_Plugin me = new Powershell_Plugin();

            HostObj myHost = new HostObj(me);

            var Powershellstate = InitialSessionState.CreateDefault();
            Powershellstate.AuthorizationManager = null;
            Runspace myRunSpace = RunspaceFactory.CreateRunspace();
            myRunSpace.Open();
            Pipeline pipeline = myRunSpace.CreatePipeline();
            using (PowerShell powershell = PowerShell.Create())
                {
                    powershell.Runspace = myRunSpace;
                    powershell.Commands.AddScript(ScriptBlock,true);
                    Collection<PSObject> output = powershell.Invoke();
                    foreach (PSObject outputItem in output)
                    {
                        if (outputItem != null)
                        {
                            //TODO: do something with the output item 
                        }
                    }
                myRunSpace.Close();
            }
        }

        public static string ReadScript(string filename)
        {
            try
            {
                using (StreamReader reader = new StreamReader(filename))
                {
                    StringBuilder fileContents = new StringBuilder();
                    string curLine;
                    while ((curLine = reader.ReadLine()) != null)
                    {
                        fileContents.Append(curLine + "\n");
                    }
                    return fileContents.ToString();
                }
            }
            catch (Exception e)
            {
                return e.Message;
            }

        }
    }

    internal class HostObj : PSHost
    {
        private Powershell_Plugin program;
        private CultureInfo originalCultureInfo =
            System.Threading.Thread.CurrentThread.CurrentCulture;
        private CultureInfo originalUICultureInfo =
            System.Threading.Thread.CurrentThread.CurrentUICulture;
        private Guid myId = Guid.NewGuid();

        public HostObj(Powershell_Plugin program)
        {
            this.program = program;
        }

        public override System.Globalization.CultureInfo CurrentCulture
        {
            get { return this.originalCultureInfo; }
        }

        public override System.Globalization.CultureInfo CurrentUICulture
        {
            get { return this.originalUICultureInfo; }
        }

        public override Guid InstanceId
        {
            get { return this.myId; }
        }

        public override string Name
        {
            get { return "MySampleConsoleHostImplementation"; }
        }

        public override PSHostUserInterface UI
        {
            get { return null; }
        }

        public override Version Version
        {
            get { return new Version(1, 0, 0, 0); }
        }

        public override void EnterNestedPrompt()
        {
            throw new NotImplementedException(
                "The method or operation is not implemented.");
        }

        public override void ExitNestedPrompt()
        {
            throw new NotImplementedException(
                "The method or operation is not implemented.");
        }

        public override void NotifyBeginApplication()
        {
            return;
        }

        public override void NotifyEndApplication()
        {
            return;
        }

        public override void SetShouldExit(int exitCode)
        {
            this.program.ShouldExit = true;
            this.program.ExitCode = exitCode;
        }
    }
}
